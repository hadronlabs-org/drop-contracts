on:
  push:
    branches:
      - '**'

name: tests

jobs:
  clippy:
    name: Actions - clippy
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          components: clippy
          profile: minimal
          override: true
          target: wasm32-unknown-unknown
      - run: cargo fetch --verbose
      - run: cargo clippy --all --all-targets -- -D warnings
      - run: cargo clippy --lib --target wasm32-unknown-unknown -- -D warnings
  coverage:
    name: Actions - unit tests coverage
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev  
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --version 0.29.1
      - run: cargo tarpaulin --exclude-files "packages/*" 
          --exclude-files "*/proto/*"
          --exclude-files "contracts/price-provider/*" 
          --exclude-files "contracts/auto-withdrawer/*" 
          --exclude-files "contracts/hook-tester/*" 
          --exclude-files "contracts/astroport-exchange-handler/*"  
          --exclude-files "contracts/proposal-votes-poc/*" 
          --exclude-files "contracts/rewards-manager/*" 
          --exclude-files "contracts/puppeteer-authz/*" 
          --exclude-files "contracts/validators-stats/*" 
          --exclude-files "contracts/provider-proposals-poc/*" 
          --exclude-files "contracts/redemption-rate-adapter/*" 
          --exclude-files "*schema*" 
          --out Xml --output-dir ./
      - name: Produce the coverage report
        uses: insightsengineering/coverage-action@v2
        with:
          # Path to the Cobertura XML report.
          path: ./cobertura.xml
          # Minimum total coverage, if you want to the
          # workflow to enforce it as a standard.
          # This has no effect if the `fail` arg is set to `false`.
          threshold: 45
          # Fail the workflow if the minimum code coverage
          # reuqirements are not satisfied.
          fail: true
          # Publish the rendered output as a PR comment
          publish: true
          # Create a coverage diff report.
          diff: false
          # Branch to diff against.
          # Compare the current coverage to the coverage
          # determined on this branch.
          # diff-branch: main
          # # This is where the coverage reports for the
          # # `diff-branch` are stored.
          # # Branch is created if it doesn't already exist'.
          # diff-storage: false
          # A custom title that can be added to the code
          # coverage summary in the PR comment.
          coverage-summary-title: "Code Coverage Summary"
  rustfmt:
    name: Actions - rustfmt
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          components: rustfmt
          profile: minimal
          override: true
      - run: cargo fmt -- --check

  unit-test:
    name: Actions - unit test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          profile: minimal
      - run: cargo fetch --verbose
      - run: cargo build
      - run: cargo test --verbose --all
        env:
          RUST_BACKTRACE: 1
  lint-test:
    name: Actions - integration tests lint
    runs-on: self-hosted
    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '18.16.1'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install Yarn
        run: npm install -g yarn
      - name: Lint
        run: cd integration_tests && yarn --ignore-engines && yarn lint
  images-prepare:
    name: Actions - images prepare
    runs-on: self-hosted
    steps:
      - name: Upgrade docker compose to use v2
        run: sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '18.16.1'    
      - name: Install Yarn
        run: npm install -g yarn
      - name: Setup Go environment
        uses: actions/setup-go@v5.0.0
        with:
          go-version: 1.20
          cache: false
      - name: Log in to Private Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build images
        run: |
          cd integration_tests
          yarn build-images
  artifacts-prepare:
    name: Actions - artifacts prepare
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          profile: minimal
          override: true  
      - run: make compile
      - name: Cache artifacts
        uses: actions/cache@v4
        with:
          path: artifacts
          key: ${{ runner.os }}-${{ github.sha }}