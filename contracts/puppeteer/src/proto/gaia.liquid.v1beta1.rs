// @generated
// This file is @generated by prost-build.
/// Params defines the parameters for the x/liquid module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// global_liquid_staking_cap represents a cap on the portion of stake that
    /// comes from liquid staking providers
    #[prost(string, tag = "8")]
    pub global_liquid_staking_cap: ::prost::alloc::string::String,
    /// validator_liquid_staking_cap represents a cap on the portion of stake that
    /// comes from liquid staking providers for a specific validator
    #[prost(string, tag = "9")]
    pub validator_liquid_staking_cap: ::prost::alloc::string::String,
}
/// TokenizeShareRecord represents a tokenized delegation
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenizeShareRecord {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
    /// module account take the role of delegator
    #[prost(string, tag = "3")]
    pub module_account: ::prost::alloc::string::String,
    /// validator delegated to for tokenize share record creation
    #[prost(string, tag = "4")]
    pub validator: ::prost::alloc::string::String,
}
/// PendingTokenizeShareAuthorizations stores a list of addresses that have their
/// tokenize share enablement in progress
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PendingTokenizeShareAuthorizations {
    #[prost(string, repeated, tag = "1")]
    pub addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// TokenizeShareRecordReward represents the properties of tokenize share
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenizeShareRecordReward {
    #[prost(uint64, tag = "1")]
    pub record_id: u64,
    #[prost(message, repeated, tag = "2")]
    pub reward: ::prost::alloc::vec::Vec<super::super::super::cosmos::base::v1beta1::DecCoin>,
}
/// LiquidValidator is the storage layout for details about a validator's liquid
/// stake.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidValidator {
    /// operator_address defines the address of the validator's operator; bech
    /// encoded in JSON.
    #[prost(string, tag = "1")]
    pub operator_address: ::prost::alloc::string::String,
    /// Number of shares either tokenized or owned by a liquid staking provider
    #[prost(string, tag = "3")]
    pub liquid_shares: ::prost::alloc::string::String,
}
/// TokenizeShareLockStatus indicates whether the address is able to tokenize
/// shares
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TokenizeShareLockStatus {
    /// UNSPECIFIED defines an empty tokenize share lock status
    Unspecified = 0,
    /// LOCKED indicates the account is locked and cannot tokenize shares
    Locked = 1,
    /// UNLOCKED indicates the account is unlocked and can tokenize shares
    Unlocked = 2,
    /// LOCK_EXPIRING indicates the account is unable to tokenize shares, but
    /// will be able to tokenize shortly (after 1 unbonding period)
    LockExpiring = 3,
}
impl TokenizeShareLockStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TokenizeShareLockStatus::Unspecified => "TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED",
            TokenizeShareLockStatus::Locked => "TOKENIZE_SHARE_LOCK_STATUS_LOCKED",
            TokenizeShareLockStatus::Unlocked => "TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED",
            TokenizeShareLockStatus::LockExpiring => "TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "TOKENIZE_SHARE_LOCK_STATUS_LOCKED" => Some(Self::Locked),
            "TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED" => Some(Self::Unlocked),
            "TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING" => Some(Self::LockExpiring),
            _ => None,
        }
    }
}
/// GenesisState defines the liquid module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of related to deposit.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// store tokenize share records to provide reward to record owners
    #[prost(message, repeated, tag = "9")]
    pub tokenize_share_records: ::prost::alloc::vec::Vec<TokenizeShareRecord>,
    /// last tokenize share record id, used for next share record id calculation
    #[prost(uint64, tag = "10")]
    pub last_tokenize_share_record_id: u64,
    /// total number of liquid staked tokens at genesis
    #[prost(bytes = "vec", tag = "11")]
    pub total_liquid_staked_tokens: ::prost::alloc::vec::Vec<u8>,
    /// tokenize shares locks at genesis
    #[prost(message, repeated, tag = "12")]
    pub tokenize_share_locks: ::prost::alloc::vec::Vec<TokenizeShareLock>,
}
/// TokenizeSharesLock required for specifying account locks at genesis
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenizeShareLock {
    /// Address of the account that is locked
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// Status of the lock (LOCKED or LOCK_EXPIRING)
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    /// Completion time if the lock is expiring
    #[prost(message, optional, tag = "3")]
    pub completion_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// QueryLiquidValidatorRequest is the request type for the Query/LiquidValidator RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLiquidValidatorRequest {
    #[prost(string, tag = "1")]
    pub validator_addr: ::prost::alloc::string::String,
}
/// QueryLiquidValidatorResponse is the response type for the Query/LiquidValidator RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLiquidValidatorResponse {
    #[prost(message, optional, tag = "1")]
    pub liquid_validator: ::core::option::Option<LiquidValidator>,
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// QueryTokenizeShareRecordByIdRequest is request type for the
/// Query/QueryTokenizeShareRecordById RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordByIdRequest {
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// QueryTokenizeShareRecordByIdRequest is response type for the
/// Query/QueryTokenizeShareRecordById RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordByIdResponse {
    #[prost(message, optional, tag = "1")]
    pub record: ::core::option::Option<TokenizeShareRecord>,
}
/// QueryTokenizeShareRecordByDenomRequest is request type for the
/// Query/QueryTokenizeShareRecordByDenom RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordByDenomRequest {
    #[prost(string, tag = "1")]
    pub denom: ::prost::alloc::string::String,
}
/// QueryTokenizeShareRecordByDenomResponse is response type for the
/// Query/QueryTokenizeShareRecordByDenom RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordByDenomResponse {
    #[prost(message, optional, tag = "1")]
    pub record: ::core::option::Option<TokenizeShareRecord>,
}
/// QueryTokenizeShareRecordsOwnedRequest is request type for the
/// Query/QueryTokenizeShareRecordsOwned RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordsOwnedRequest {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
}
/// QueryTokenizeShareRecordsOwnedResponse is response type for the
/// Query/QueryTokenizeShareRecordsOwned RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordsOwnedResponse {
    #[prost(message, repeated, tag = "1")]
    pub records: ::prost::alloc::vec::Vec<TokenizeShareRecord>,
}
/// QueryAllTokenizeShareRecordsRequest is request type for the
/// Query/QueryAllTokenizeShareRecords RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllTokenizeShareRecordsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "1")]
    pub pagination:
        ::core::option::Option<super::super::super::cosmos::base::query::v1beta1::PageRequest>,
}
/// QueryAllTokenizeShareRecordsResponse is response type for the
/// Query/QueryAllTokenizeShareRecords RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllTokenizeShareRecordsResponse {
    #[prost(message, repeated, tag = "1")]
    pub records: ::prost::alloc::vec::Vec<TokenizeShareRecord>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination:
        ::core::option::Option<super::super::super::cosmos::base::query::v1beta1::PageResponse>,
}
/// QueryLastTokenizeShareRecordIdRequest is request type for the
/// Query/QueryLastTokenizeShareRecordId RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryLastTokenizeShareRecordIdRequest {}
/// QueryLastTokenizeShareRecordIdResponse is response type for the
/// Query/QueryLastTokenizeShareRecordId RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryLastTokenizeShareRecordIdResponse {
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
/// QueryTotalTokenizeSharedAssetsRequest is request type for the
/// Query/QueryTotalTokenizeSharedAssets RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryTotalTokenizeSharedAssetsRequest {}
/// QueryTotalTokenizeSharedAssetsResponse is response type for the
/// Query/QueryTotalTokenizeSharedAssets RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalTokenizeSharedAssetsResponse {
    #[prost(message, optional, tag = "1")]
    pub value: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
}
/// QueryTotalLiquidStakedRequest is request type for the
/// Query/QueryQueryTotalLiquidStaked RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryTotalLiquidStaked {}
/// QueryTotalLiquidStakedResponse is response type for the
/// Query/QueryQueryTotalLiquidStaked RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalLiquidStakedResponse {
    #[prost(string, tag = "1")]
    pub tokens: ::prost::alloc::string::String,
}
/// QueryTokenizeShareLockInfo queries the tokenize share lock information
/// associated with given account
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareLockInfo {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
/// QueryTokenizeShareLockInfoResponse is the response from the
/// QueryTokenizeShareLockInfo query
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareLockInfoResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub expiration_time: ::prost::alloc::string::String,
}
/// QueryTokenizeShareRecordRewardRequest is the request type for the
/// Query/TokenizeShareRecordReward RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordRewardRequest {
    #[prost(string, tag = "1")]
    pub owner_address: ::prost::alloc::string::String,
}
/// QueryTokenizeShareRecordRewardResponse is the response type for the
/// Query/TokenizeShareRecordReward RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTokenizeShareRecordRewardResponse {
    /// rewards defines all the rewards accrued by a delegator.
    #[prost(message, repeated, tag = "1")]
    pub rewards: ::prost::alloc::vec::Vec<TokenizeShareRecordReward>,
    /// total defines the sum of all the rewards.
    #[prost(message, repeated, tag = "2")]
    pub total: ::prost::alloc::vec::Vec<super::super::super::cosmos::base::v1beta1::DecCoin>,
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless
    /// overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/liquid parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
/// MsgTokenizeShares tokenizes a delegation
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTokenizeShares {
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub validator_address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub amount: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
    #[prost(string, tag = "4")]
    pub tokenized_share_owner: ::prost::alloc::string::String,
}
/// MsgTokenizeSharesResponse defines the Msg/MsgTokenizeShares response type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTokenizeSharesResponse {
    #[prost(message, optional, tag = "1")]
    pub amount: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
}
/// MsgRedeemTokensForShares redeems a tokenized share back into a native
/// delegation
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRedeemTokensForShares {
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub amount: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
}
/// MsgRedeemTokensForSharesResponse defines the Msg/MsgRedeemTokensForShares
/// response type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRedeemTokensForSharesResponse {
    #[prost(message, optional, tag = "1")]
    pub amount: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
}
/// MsgTransferTokenizeShareRecord transfer a tokenize share record
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransferTokenizeShareRecord {
    #[prost(uint64, tag = "1")]
    pub tokenize_share_record_id: u64,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_owner: ::prost::alloc::string::String,
}
/// MsgTransferTokenizeShareRecordResponse defines the
/// Msg/MsgTransferTokenizeShareRecord response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgTransferTokenizeShareRecordResponse {}
/// MsgDisableTokenizeShares prevents the tokenization of shares for a given
/// address
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDisableTokenizeShares {
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
}
/// MsgDisableTokenizeSharesResponse defines the Msg/DisableTokenizeShares
/// response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgDisableTokenizeSharesResponse {}
/// MsgEnableTokenizeShares re-enables tokenization of shares for a given address
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgEnableTokenizeShares {
    #[prost(string, tag = "1")]
    pub delegator_address: ::prost::alloc::string::String,
}
/// MsgEnableTokenizeSharesResponse defines the Msg/EnableTokenizeShares response
/// type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgEnableTokenizeSharesResponse {
    #[prost(message, optional, tag = "1")]
    pub completion_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// MsgWithdrawTokenizeShareRecordReward withdraws tokenize share rewards for a
/// specific record
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawTokenizeShareRecordReward {
    #[prost(string, tag = "1")]
    pub owner_address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub record_id: u64,
}
/// MsgWithdrawTokenizeShareRecordReward defines the
/// Msg/WithdrawTokenizeShareRecordReward response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgWithdrawTokenizeShareRecordRewardResponse {}
/// MsgWithdrawAllTokenizeShareRecordReward withdraws tokenize share rewards or
/// all records owned by the designated owner
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawAllTokenizeShareRecordReward {
    #[prost(string, tag = "1")]
    pub owner_address: ::prost::alloc::string::String,
}
/// MsgWithdrawAllTokenizeShareRecordRewardResponse defines the
/// Msg/WithdrawTokenizeShareRecordReward response type.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgWithdrawAllTokenizeShareRecordRewardResponse {}
// @@protoc_insertion_point(module)
